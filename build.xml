<?xml version="1.0"?>
<project name="TechDivision_ApplicationServerExample" default="deploy" basedir=".">
    <property file="${basedir}/build.properties"/>
    <property file="${basedir}/build.default.properties"/>
    <property environment="env" />
    <property name="php-src.dir" value="${basedir}/src" />
    <property name="php-test.dir" value="${basedir}/tests" />
    <property name="php-target.dir" value="${basedir}/target"/>

    <!-- ==================================================================== -->
    <!-- Cleans the directories with the generated source files				  -->
    <!-- ==================================================================== -->
    <target name="clean" description="Cleans almost everything, so use carefully.">
        <delete dir="${php-target.dir}" includeemptydirs="true" quiet="false" verbose="true" failonerror="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares all the required directories								  -->
    <!-- ==================================================================== -->
    <target name="prepare" depends="clean" description="Prepares all the required directories.">
        <mkdir dir="${php-target.dir}" />
    </target>

    <!-- ==================================================================== -->
    <!-- Copies the sources to the target directory							  -->
    <!-- ==================================================================== -->
    <target name="copy" depends="prepare" description="Copies the sources to the target directory.">
        <copy todir="${php-target.dir}/${webapp.name}" preservelastmodified="true" overwrite="true">
            <fileset dir="${php-src.dir}">
                <include name="**/*.php" />
                <include name="**/*.yml" />
                <include name="**/*.xml" />
                <include name="**/*.xml.*" />
            </fileset>
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
        <copy todir="${php-target.dir}/${webapp.name}" preservelastmodified="true" overwrite="true">
            <fileset dir="${php-src.dir}">
                <include name="**/*" />
                <exclude name="**/*.php" />
                <exclude name="**/*.yml" />
                <exclude name="**/*.xml" />
                <exclude name="**/*.xml.*" />
            </fileset>
        </copy>
    </target>

    <!-- ==================================================================== -->
    <!-- Copies the sources to the deploy directory     					  -->
    <!-- ==================================================================== -->
    <target name="deploy" depends="copy" description="Copies the sources to the deploy directory.">
        <copy todir="${deploy.dir}" preservelastmodified="true" overwrite="true">
            <fileset dir="${php-target.dir}">
                <include name="**/*"/>
            </fileset>
        </copy>
        <exec executable="composer.phar" dir="${deploy.dir}/${webapp.name}">
            <arg line="update"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Deletes the magento instance for testing purpose   			 	  -->
    <!-- ==================================================================== -->
    <target name="delete-instance">
        <delete dir="${deploy.dir}/${webapp.name}" includeemptydirs="true" quiet="false" verbose="false" failonerror="true"/>
        <delete dir="${basedir}/instance-src" includeemptydirs="true" quiet="false" verbose="false" failonerror="true"/>
    </target>
        	
	<!-- ==================================================================== -->
	<!-- Initializing a magento instance for testing purpose   			 	  -->
	<!-- ==================================================================== -->
	<target name="init-instance" unless="${instance.present}" description="Creats a magento instance for testing purpose">
        <!-- prepare the folder structure -->
        <antcall target="prepare" />
        <!-- delete the old instance -->
        <echo message="Delete existing Magento CE ${magento.version} source..."/>
        <antcall target="delete-instance"/>
        <!-- download the magento sources -->
		<echo message="Preparing Magento CE ${magento.version} source..."/>
		<antcall target="get-magento-src" />
        <!-- initialize the database -->
		<echo message="Initialize database ${mysql.database}..." />
		<exec executable="mysql">
			<arg line="-h${mysql.host}"/>
			<arg line="-u${mysql.username}"/>
			<arg line="-p${mysql.password}"/>
			<arg line="-e'DROP DATABASE IF EXISTS ${mysql.database};create database ${mysql.database}'"/>
		</exec>
		<antcall target="finalize-instance-installation"/>
		<antcall target="deploy"/>
	</target>
	
	<!-- ==================================================================== -->
	<!-- Finalize installation of magento instance			   			 	  -->
	<!-- ==================================================================== -->
	<target name="finalize-instance-installation">
		<echo message="Installing instance ${instance.url}..." />
		<exec dir="${deploy.dir}/${webapp.name}" executable="php">
			<arg line="-f install.php --
				--license_agreement_accepted yes
				--locale 'en_US'
				--timezone 'Europe/Berlin'
				--default_currency EUR
				--db_host '${mysql.host}'
				--db_name ${mysql.database}
				--db_user ${mysql.username}
				--db_pass ${mysql.password}
				--url 'http://magento.local:8586'
				--secure_base_url 'http://magento.local:8586'
				--use_rewrites no
				--skip_url_validation yes
				--use_secure no
				--use_secure_admin no
				--admin_lastname io
				--admin_firstname appserver
                --admin_email 'info@appserver.io'
				--admin_username appserver
				--admin_password appserver.i0
			"/>
		</exec>
		<delete file="${deploy.dir}/${webapp.name}/app/etc/use_cache.ser" />
		<exec dir="${basedir}" executable="/bin/ln" >
			<arg value="-s"/>
			<arg value="${deploy.dir}/${webapp.name}"/>
			<arg value="instance-src"/>
		</exec>
	</target>

	<!-- ==================================================================== -->
	<!-- Get Magento sources by given version number		  		 	  	  -->
	<!-- ==================================================================== -->
	<target name="get-magento-src">
		<exec dir="${deploy.dir}" executable="git">
			<arg line="clone -b magento-ce-${magento.version} https://github.com/speedupmate/Magento-CE-Mirror.git ${webapp.name}"/>
		</exec>
	</target>

    <!-- ==================================================================== -->
    <!-- Generates the API documentation                                      -->
    <!-- ==================================================================== -->
    <target name="apidoc" description="Generates the API documentation.">
        <exec executable="phpdoc">
            <arg line="-ct type -ue on -s on -t ${php-target.dir}/docs -o HTML:frames:earthli -d ${php-src.dir}/app/code/core"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Runs the code sniffer and generates a report                         -->
    <!-- ==================================================================== -->
    <target name="phpcs" depends="apidoc" description="Runs the code sniffer and generates a report.">
        <exec executable="phpcs" output="${php-target.dir}/reports/checkstyle.xml">
            <arg line="--standard=ZEND --report=checkstyle ${php-src.dir}"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Runs the copy and paste detection                                    -->
    <!-- ==================================================================== -->
    <target name="phpcpd" depends="phpcs" description="Runs the copy and paste detection.">
        <exec executable="phpcpd">
            <arg line="--log-pmd ${php-target.dir}/reports/pmd-cpd.xml ${php-src.dir}"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Generate phploc.csv                                                  -->
    <!-- ==================================================================== -->
    <target name="phploc" depends="phpcpd" description="Generate phploc.csv">
        <exec executable="phploc">
            <arg line="--log-xml ${php-target.dir}/reports/phploc.xml ${php-src.dir}"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Runs the PHPDepend tool and generats a graphs                        -->
    <!-- ==================================================================== -->
    <target name="pdepend" depends="phploc" description="Runs the PHPDepend tool and generats a graphs.">
        <exec executable="pdepend">
            <arg line="--summary-xml=${php-target.dir}/reports/pdepend.xml --jdepend-xml=${php-target.dir}/reports/jdepend.xml --jdepend-chart=${php-target.dir}/reports/jdepend.svg --overview-pyramid=${php-target.dir}/reports/pdepend-pyramid.svg ${php-src.dir}" />
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Runs the PHP mess detector tool                                      -->
    <!-- ==================================================================== -->
    <target name="phpmd" depends="pdepend" description="Runs the PHP Mess detector tool.">
        <exec executable="phpmd">
            <arg line="${php-src.dir} xml codesize,unusedcode --reportfile ${php-target.dir}/reports/pmd.xml" />
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Copies the test sources to the target directory					  -->
    <!-- ==================================================================== -->
    <target name="copy-tests" depends="copy" description="Copies the test sources to the target directory.">
        <copy todir="${php-target.dir}">
            <fileset dir="${php-test.dir}">
                <include name="**/*" />
            </fileset>
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
    </target>

    <!-- ==================================================================== -->
    <!-- Runs the PHPUnit tests and generates a report                        -->
    <!-- ==================================================================== -->
    <target name="run-tests" depends="copy-tests" description="Runs the PHPUnit tests and generates a report.">
        <exec executable="phpunit" dir="${php-target.dir}">
            <arg line="--bootstrap bootstrap.php --configuration phpunit.xml.dist" />
        </exec>
    </target>

</project>